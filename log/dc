set RAX to {parameter data. lock steering to lookdirup(choose ship:facing:forevector if (not hasnode) else node:deltav,ship:facing:upvector). return true.}.
set RAX to {parameter data. lock steering to lookdirup(choose ship:facing:forevector if (not hasnode) else nextnode:deltav,ship:facing:upvector). return true.}.
set RAX to {parameter data. lock steering to lookdirup(choose ship:facing:forevector if (not hasnode) else nextnode:deltav,ship:facing:upvector). return true.}.
set RAX to {parameter data. lock steering to lookdirup(choose ship:facing:forevector if (not hasnode) else nextnode:deltav,ship:facing:upvector). return true.}.
set RAX to {parameter data. if hasnode and nextnode:eta>0 and (not data:haskey("")) {return false.} if not data:haskey("") {set data: to list(0,time:seconds,nextnode:deltav:mag,0,0). for p in ship:rcs {if p:enabled {local fv to ship:facing:forevector:normalized. for tv in p:thrustvectors {if round(tv:normalized*fv, 4)=-1 {set data[""][3] to data:[3]+p:availablethrust. break.}}}}} set ship:control:fore to 1. local t1 to time:seconds. local dt to t1-data:[1]. local acc to (data:[3]/ship:mass)*dt. set data[""][0] to data:[0]+acc. set data[""][1] to t1. if data:[0]>=data:[2] {set ship:control:fore to 0. return true.}}.
set RAX to {parameter data. lock steering to lookdirup(choose ship:facing:forevector if (not hasnode) else nextnode:deltav,ship:facing:upvector). return true.}.
set RAX to {parameter data. lock steering to lookdirup(choose ship:facing:forevector if (not hasnode) else nextnode:deltav,ship:facing:upvector). return true.}.
set RAX to {parameter data. unlock steering. return true.}.
set RAX to {parameter data. lock steering to lookdirup(choose ship:facing:forevector if (not hasnode) else nextnode:deltav,ship:facing:upvector). return true.}.
set RAX to {parameter data. if hasnode and nextnode:eta>0 and (not data:haskey("man")) {return false.} if not data:haskey("man") {set data:man to list(0,time:seconds,nextnode:deltav:mag,0,0). for p in ship:rcs {if p:enabled {local fv to ship:facing:forevector:normalized. for tv in p:thrustvectors {if round(tv:normalized*fv, 4)=-1 {set data["man"][3] to data:man[3]+p:availablethrust. break.}}}}} set ship:control:fore to 1. local t1 to time:seconds. local dt to t1-data:man[1]. local acc to (data:man[3]/ship:mass)*dt. set data["man"][0] to data:man[0]+acc. set data["man"][1] to t1. if data:man[0]>=data:man[2] {set ship:control:fore to 0. return true.}}.
set RAX to {parameter data. unlock steering. return true.}.
set RAX to {parameter data. lock steering to lookdirup(choose ship:facing:forevector if (not hasnode) else nextnode:deltav,ship:facing:upvector). return true.}.
set RAX to {parameter data. if hasnode and nextnode:eta>0 and (not data:haskey("man")) {return false.} if not data:haskey("man") {set data:man to list(0,time:seconds,nextnode:deltav:mag,0,0). for p in ship:rcs {if p:enabled {local fv to ship:facing:forevector:normalized. for tv in p:thrustvectors {if round(tv:normalized*fv, 4)=-1 {set data["man"][3] to data:man[3]+p:availablethrust. break.}}}}} set ship:control:fore to 1. local t1 to time:seconds. local dt to t1-data:man[1]. local acc to (data:man[3]/ship:mass)*dt. set data["man"][0] to data:man[0]+acc. set data["man"][1] to t1. if data:man[0]>=data:man[2] {set ship:control:fore to 0. return true.}}.
set RAX to {parameter data. unlock steering. return true.}.
set RAX to {parameter data. lock steering to lookdirup(choose ship:facing:forevector if (not hasnode) else nextnode:deltav,ship:facing:upvector). return true.}.
set RAX to {parameter data. if hasnode and nextnode:eta>0 and (not data:haskey("man1")) {return false.} if not data:haskey("man1") {set data:man1 to list(0,time:seconds,nextnode:deltav:mag,true,true).}  set ship:control:pilotmainthrottle to 1. local t1 to time:seconds. local dt to t1-data:man1[1]. local acc to (ship:thrust/ship:mass)*dt. set data["man1"][0] to data:man1[0]+acc. set data["man1"][1] to t1. if data:man1[0]>=data:man1[2] {set ship:control:pilotmainthrottle to 0. return true. }}.
set RAX to {parameter data. if hasnode and nextnode:eta>0 and (not data:haskey("man1")) {return false.} if not data:haskey("man1") {set data:man1 to list(0,time:seconds,nextnode:deltav:mag,true,true).}  set ship:control:pilotmainthrottle to 1. local t1 to time:seconds. local dt to t1-data:man1[1]. local acc to (ship:thrust/ship:mass)*dt. set data["man1"][0] to data:man1[0]+acc. set data["man1"][1] to t1. if data:man1[0]>=data:man1[2] {set ship:control:pilotmainthrottle to 0. return true. }}.
set RAX to {parameter data. lock steering to lookdirup(choose ship:facing:forevector if (not hasnode) else nextnode:deltav,ship:facing:upvector). return true.}.
set RAX to {parameter data. if hasnode and nextnode:eta>0 and (not data:haskey("man")) {return false.} if not data:haskey("man") {set data:man to list(0,time:seconds,nextnode:deltav:mag,true,true).}  set ship:control:pilotmainthrottle to 1. local t1 to time:seconds. local dt to t1-data:man[1]. local acc to (ship:thrust/ship:mass)*dt. set data["man"][0] to data:man[0]+acc. set data["man"][1] to t1. if data:man[0]>=data:man[2] {set ship:control:pilotmainthrottle to 0. return true. }}.
set RAX to {parameter data. lock steering to lookdirup(prograde:vector,ship:facing:upvector). return true.}.
set RAX to {parameter data. unlock steering. return true.}.
set RAX to {parameter data. if (not data:haskey("turn")) {lock steering to lookdirup(prograde:vector,ship:facing:upvector). set data:turn to list(true, false).} if (data:turn[0] and ship:angularvel:mag<=0.004 and abs(steeringmanager:angleerror)<=0.4) {unlock steering. rcs on. set ship:control:roll to 1. set data:turn to list(false, true).} if (data:turn[1] and ship:angularvel:mag>=1.04) {set ship:control:roll to 0.  return true.} return false.}.
set RAX to {parameter data. if (not data:haskey("cu")) {lock steering to lookdirup(ship:facing:forevector,ship:facing:upvector). set data:cu to list(true, false).} print(abs(steeringmanager:angleerror)).if (data:cu[0] and ship:angularvel:mag<=0.004 and abs(steeringmanager:angleerror)<=0.4) {unlock steering. rcs on. set ship:control:roll to 1. set data:cu to list(false, true).} if (data:cu[1] and ship:angularvel:mag>=5.23) {set ship:control:roll to 0.  return true.} return false.}.
set RAX to {parameter data. if (not data:haskey("cu")) {lock steering to lookdirup(Sun:position,v(1,0,0)). set data:cu to list(true, false).} wait 0. print(abs(steeringmanager:angleerror)).if (data:cu[0] and ship:angularvel:mag<=0.004 and abs(steeringmanager:angleerror)<=0.4) {unlock steering. rcs on. set ship:control:roll to 1. set data:cu to list(false, true).} if (data:cu[1] and ship:angularvel:mag>=1.04) {set ship:control:roll to 0.  return true.} return false.}.
set RAX to {parameter data. if (not data:haskey("cu")) {lock steering to lookdirup(north:vector,Sun:position). set data:cu to list(true, false). wait 5.} print(abs(steeringmanager:angleerror)).if (data:cu[0] and ship:angularvel:mag<=0.004 and abs(steeringmanager:angleerror)<=0.4) {unlock steering. rcs on. set ship:control:roll to 1. set data:cu to list(false, true).} if (data:cu[1] and ship:angularvel:mag>=1.04) {set ship:control:roll to 0.  return true.} return false.}.
set RAX to {parameter data. if (not data:haskey("cu")) {lock steering to lookdirup(north:vector,Sun:position). set data:cu to list(true, false). wait 5.} print(abs(steeringmanager:angleerror)).if (data:cu[0] and ship:angularvel:mag<=0.004 and abs(steeringmanager:angleerror)<=0.4) {unlock steering. rcs on. set ship:control:roll to 1. set data:cu to list(false, true).} if (data:cu[1] and ship:angularvel:mag>=1.04) {set ship:control:roll to 0.  return true.} return false.}.
set RAX to {parameter data. if (not data:haskey("cu")) {lock steering to lookdirup(Sun:position,north:vector). set data:cu to list(true, false). print(abs(steeringmanager:angleerror)).} if (data:cu[0] and ship:angularvel:mag<=0.004 and abs(steeringmanager:angleerror)<=0.4) {unlock steering. rcs on. set ship:control:roll to 1. set data:cu to list(false, true).} if (data:cu[1] and ship:angularvel:mag>=1.04) {set ship:control:roll to 0.  return true.} return false.}.
set RAX to {parameter data. if (not data:haskey("cu")) {lock steering to lookdirup(Sun:position,north:vector). set data:cu to list(true, false). print(abs(steeringmanager:angleerror)).} if (data:cu[0] and ship:angularvel:mag<=0.004 and abs(steeringmanager:angleerror)<=0.4) {unlock steering. rcs on. set ship:control:roll to 1. set data:cu to list(false, true).} if (data:cu[1] and ship:angularvel:mag>=1.04) {set ship:control:roll to 0.  return true.} return false.}.
set RAX to {parameter data. if (not data:haskey("cu")) {lock steering to lookdirup(Sun:position,north:vector). set data:cu to list(true, false). print(abs(steeringmanager:angleerror)).} if (data:cu[0] and ship:angularvel:mag<=0.004 and abs(steeringmanager:angleerror)<=0.4) {unlock steering. rcs on. set ship:control:roll to 1. set data:cu to list(false, true).} if (data:cu[1] and ship:angularvel:mag>=1.04) {set ship:control:roll to 0.  return true.} return false.}.
set RAX to {parameter data. if (not data:haskey("a")) {lock steering to lookdirup(Sun:position,north:vector). set data:a to list(true, false). wait 1. print(abs(steeringmanager:angleerror)).} if (data:a[0] and ship:angularvel:mag<=0.004 and abs(steeringmanager:angleerror)<=0.4) {unlock steering. rcs on. set ship:control:roll to 1. set data:a to list(false, true).} if (data:a[1] and ship:angularvel:mag>=1.04) {set ship:control:roll to 0.  return true.} return false.}.
set RAX to {parameter data. if (not data:haskey("a")) {lock steering to lookdirup(Sun:position,north:vector). set data:a to list(true, false). print(abs(steeringmanager:angleerror)).} if (data:a[0] and ship:angularvel:mag<=0.004 and abs(steeringmanager:angleerror)<=0.4) {unlock steering. rcs on. set ship:control:roll to 1. set data:a to list(false, true).} if (data:a[1] and ship:angularvel:mag>=1.04) {set ship:control:roll to 0.  return true.} return false.}.
set RAX to {parameter data. if (not data:haskey("a")) {lock steering to lookdirup(Sun:position,north:vector). set data:a to list(true, false). wait 1. print(abs(steeringmanager:angleerror)).} if (data:a[0] and ship:angularvel:mag<=0.004 and abs(steeringmanager:angleerror)<=0.4) {unlock steering. rcs on. set ship:control:roll to 1. set data:a to list(false, true).} if (data:a[1] and ship:angularvel:mag>=1.04) {set ship:control:roll to 0.  return true.} return false.}.
set RAX to {parameter data. if (not data:haskey("a")) {lock steering to lookdirup(Sun:position,north:vector). set data:a to list(true, false). wait 0. print(abs(steeringmanager:angleerror)).} if (data:a[0] and ship:angularvel:mag<=0.004 and abs(steeringmanager:angleerror)<=0.4) {unlock steering. rcs on. set ship:control:roll to 1. set data:a to list(false, true).} if (data:a[1] and ship:angularvel:mag>=1.04) {set ship:control:roll to 0.  return true.} return false.}.
set RAX to {parameter data. if (not data:haskey("a")) {lock steering to lookdirup(Sun:position,north:vector). set data:a to list(true, false). wait .5. print(abs(steeringmanager:angleerror)).} if (data:a[0] and ship:angularvel:mag<=0.004 and abs(steeringmanager:angleerror)<=0.4) {unlock steering. rcs on. set ship:control:roll to 1. set data:a to list(false, true).} if (data:a[1] and ship:angularvel:mag>=1.04) {set ship:control:roll to 0.  return true.} return false.}.
set RAX to {parameter data. if (not data:haskey("a")) {lock steering to lookdirup(Sun:position,north:vector). set data:a to list(true, false). wait .2. print(abs(steeringmanager:angleerror)).} if (data:a[0] and ship:angularvel:mag<=0.004 and abs(steeringmanager:angleerror)<=0.4) {unlock steering. rcs on. set ship:control:roll to 1. set data:a to list(false, true).} if (data:a[1] and ship:angularvel:mag>=1.04) {set ship:control:roll to 0.  return true.} return false.}.
set RAX to {parameter data. if (not data:haskey("a")) {lock steering to lookdirup(Sun:position,north:vector). set data:a to list(true, false). wait .1. print(abs(steeringmanager:angleerror)).} if (data:a[0] and ship:angularvel:mag<=0.004 and abs(steeringmanager:angleerror)<=0.4) {unlock steering. rcs on. set ship:control:roll to 1. set data:a to list(false, true).} if (data:a[1] and ship:angularvel:mag>=1.04) {set ship:control:roll to 0.  return true.} return false.}.
